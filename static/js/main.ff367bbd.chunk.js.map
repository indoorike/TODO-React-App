{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","_ref","toDo","done","react_default","a","createElement","className","SearchPanel","state","searchText","onSearch","e","target","value","_this","setState","props","type","placeholder","onChange","this","Component","TodoListItem","_this$props","label","onDeleted","important","onToggleDone","onToggleImportant","classNames","onClick","TodoList","todos","elements","map","item","id","itemProps","Object","objectWithoutProperties","key","components_todo_list_item","assign","ItemStatusFilter","buttons","name","filter","onFilter","clazz","concat","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","createTodoItem","deleteItem","addItem","text","newItem","_ref2","toConsumableArray","_ref3","toggleProperty","_ref4","arr","propName","idx","findIndex","el","oldItem","objectSpread","defineProperty","slice","items","length","toLowerCase","indexOf","_this$state","doneCount","todoCount","visibleItems","search","components_app_header","components_search_panel","components_item_status_filter","components_todo_list","components_item_add_form","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.ff367bbd.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css';\r\n\r\n// React Component\r\nconst AppHeader = ({toDo, done}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>My Todo List</h1>\r\n            <h2>{toDo} more to do, {done} done</h2>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\n\r\nimport './search-panel.css';\r\n\r\n// React Component\r\nexport default class SearchPanel extends Component {\r\n    \r\n    state = {\r\n        searchText: ''\r\n    }\r\n    \r\n    onSearch = (e) => {\r\n        const searchText = e.target.value;\r\n        this.setState({ searchText });\r\n        this.props.onSearch( searchText );\r\n    };\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <input type=\"text\" className=\"form-control search-input\" \r\n                placeholder=\"type to search\" onChange={ this.onSearch }\r\n                value={ this.state.searchText } />\r\n        );\r\n    }\r\n}\r\n","import TodoListItem from './todo-list-item';\r\n\r\nexport default TodoListItem;","import React, {Component} from 'react';\r\n\r\nimport './todo-list-item.css';\r\n\r\nexport default class TodoListItem extends Component {\r\n\r\n    /**\r\n     * Основной метод рендеринга\r\n     *\r\n     * @return  {void} \r\n     */\r\n    render() {\r\n        // Деструктуризация параметров компонента\r\n        const { label, onDeleted, done, important, onToggleDone, onToggleImportant } = this.props;\r\n        \r\n        let classNames = 'todo-list-item';\r\n        if (done) {\r\n            classNames += ' done';\r\n        }\r\n\r\n        if(important) {\r\n            classNames += ' important';\r\n        }\r\n\r\n        return (\r\n            <span className={classNames}>\r\n                <span className=\"todo-list-item-label\" onClick={ onToggleDone }>\r\n                    { label }\r\n                </span>\r\n    \r\n                <button type=\"button\" className=\"btn btn-outline-success btn-sm float-right\" onClick={ onToggleImportant }>\r\n                    <i className=\"fa fa-exclamation\" />\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm float-right\" onClick={ onDeleted }>\r\n                    <i className=\"fa fa-trash-o\" />\r\n                </button>\r\n            </span>\r\n        );\r\n    }\r\n}","import TodoList from './todo-list';\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nimport TodoListItem from '../todo-list-item';\r\n\r\nimport './todo-list.css';\r\n\r\n// React Component\r\nconst TodoList = ( {todos, onDeleted, onToggleImportant, onToggleDone} ) => {\r\n    //\r\n    const elements = todos.map( (item) => {\r\n        // Деструктуризация массива поэлементно на id и всё остальное\r\n        const { id, ...itemProps } = item;\r\n        \r\n        return (\r\n            <li key={ id } className=\"list-group-item\">\r\n                <TodoListItem {...itemProps} onDeleted={ () => onDeleted(id) }\r\n                    onToggleImportant={ () => onToggleImportant(id) }\r\n                    onToggleDone={ () => onToggleDone(id) } />\r\n            </li>\r\n        );\r\n    });\r\n    \r\n    return (\r\n        <ul className=\"list-group todo-list\">\r\n            { elements }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import ItemStatusFilter from './item-status-filter';\r\n\r\nexport default ItemStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './item-status-filter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n    \r\n    // Массив с данными кнопок\r\n    buttons = [\r\n        {name: 'all', label: 'All'},\r\n        {name: 'active', label: 'Active'},\r\n        {name: 'done', label: 'Done'}\r\n    ];\r\n    \r\n    render() {\r\n        const { filter, onFilter } = this.props;\r\n        // Генерация элемента кнопки\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const isActive = filter === name;\r\n            const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\r\n\r\n            return (\r\n                <button type = \"button\" \r\n                    className={`btn ${clazz}`} \r\n                    key={ name }\r\n                    onClick={ () => onFilter(name) }>{ label }</button>\r\n            );\r\n        });\r\n        \r\n        return (\r\n            <div className = \"btn-group\">\r\n                { buttons }\r\n            </div>\r\n        );\r\n    }\r\n}","import ItemAddForm from './item-add-form';\r\n\r\nexport default ItemAddForm;","import React, { Component } from 'react';\r\n\r\nimport './item-add-form.css';\r\n\r\nexport default class ItemAddForm extends Component {\r\n\r\n    state = {\r\n        label: ''\r\n    }\r\n\r\n    onLabelChange = (e) => {\r\n        this.setState({\r\n            // Т.к. стэйт не зависит от предыдущего значения, можно передать значение напрямую\r\n            label: e.target.value\r\n        });\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        // Отмена перезагрузки страницы\r\n        e.preventDefault();\r\n        this.props.onItemAdded(this.state.label);\r\n        // Очистка поля после сабмита\r\n        this.setState({\r\n            label: ''\r\n        });\r\n    };\r\n    \r\n    //\r\n    render() {\r\n        return (\r\n            <form className=\"item-add-form d-flex\" onSubmit={this.onSubmit}>\r\n                <input type=\"text\" className=\"form-control\" value={this.state.label} \r\n                    onChange={this.onLabelChange} placeholder=\"What needs to be done\" />\r\n                <button className=\"btn btn-outline-secondary\">Add Item</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\n// App components\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport TodoList from '../todo-list';\r\nimport ItemStatusFilter from '../item-status-filter';\r\nimport ItemAddForm from '../item-add-form';\r\n\r\n// App style\r\nimport './app.css';\r\n\r\n// Main Component\r\nexport default class App extends Component {\r\n    \r\n    // Генератор ID\r\n    maxId = 100;\r\n    \r\n    state = {\r\n        // Основные данные приложения\r\n        todoData: [\r\n            this.createTodoItem('Drink Coffee'),\r\n            this.createTodoItem('Make Awesome App'),\r\n            this.createTodoItem('Have a dinner'),\r\n            this.createTodoItem('Have a lunch')\r\n        ],\r\n        // Текст для поиска\r\n        searchText: '',\r\n        // Фильтр\r\n        filter: 'all' // all, active, done\r\n    };\r\n\r\n    // Метод создания нового объекта\r\n    createTodoItem(label) {\r\n        return {\r\n            id:  this.maxId++, // Generated UID\r\n            label,\r\n            important: false,\r\n            done: false\r\n        };\r\n    }\r\n\r\n    // Удаление элемента из массива данных\r\n    deleteItem = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            const newTodoData = todoData.filter((value) => value.id !== id);\r\n            \r\n            return {\r\n                todoData: newTodoData\r\n            };\r\n        });\r\n    };\r\n\r\n    // Добавление нового элемента в массив данных\r\n    addItem = (text) => {\r\n        \r\n        const newItem = this.createTodoItem(text);\r\n        \r\n        this.setState( ({todoData}) => {\r\n            // Add Element in Array\r\n            const newTodoData = [...todoData, newItem];\r\n\r\n            return {\r\n                todoData: newTodoData\r\n            };\r\n        });\r\n    };\r\n\r\n    // \"Переключатель\" параметров у элемента\r\n    toggleProperty(arr, id, propName) {\r\n        // получение индекса у элемента для изменения параметра\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        // Определенный элемент массива\r\n        const oldItem = arr[idx];\r\n        // Новый массив с элементами, включающий старый массив + новый элемент массива\r\n        //   с измененным параметром (состоянием)\r\n        const newItem = {\r\n            ...oldItem,\r\n            [propName]: !oldItem[propName]\r\n        };\r\n\r\n        // Construct new Array\r\n        return [\r\n            ...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)\r\n        ];\r\n    }\r\n\r\n    // \"Переключатель\" параметра important\r\n    onToggleImportant = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'important')\r\n            };\r\n        });\r\n    };\r\n    \r\n    // \"Переключатель\" параметра done\r\n    onToggleDone = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'done')\r\n            };\r\n        });\r\n    };\r\n    \r\n    // 3-й вариант поиска\r\n    onSearch = (searchText) => {\r\n        this.setState({ searchText });\r\n    };\r\n\r\n    /**\r\n     * Поиск по тексту\r\n     *\r\n     * @return  {array}  Отфильтрованный массив\r\n     */\r\n    search (items, searchText) {\r\n        if (searchText.length === 0) {\r\n            return items;\r\n        }\r\n        \r\n        return items.filter((item) => item.label\r\n                        .toLowerCase()\r\n                        .indexOf(searchText) !== -1);\r\n    }\r\n\r\n    // Изменение состояния фильтра\r\n    onFilter = (filter) => {\r\n        this.setState({ filter });\r\n    };\r\n    \r\n    // Filter\r\n    filter (items, filter) {\r\n        switch (filter) {\r\n            case 'all':\r\n                return items;\r\n            case 'active':\r\n                return items.filter((item) => !item.done);\r\n            case 'done':\r\n                return items.filter((item) => item.done);\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { todoData, searchText, filter} = this.state;\r\n        // Счетчики выполненных и оставшихся заданий\r\n        const doneCount = todoData.filter(el => el.done).length;\r\n        const todoCount = todoData.length - doneCount;\r\n        // Массив найденных поиском элементов\r\n        const visibleItems = this.filter(this.search(todoData, searchText), filter);\r\n\r\n        return (\r\n            <div className=\"todo-app\">\r\n                <AppHeader toDo={todoCount} done={doneCount} />\r\n                <div className=\"top-panel d-flex\">\r\n                    <SearchPanel onSearch={ this.onSearch } />\r\n                    <ItemStatusFilter filter={ filter } onFilter={ this.onFilter } />\r\n                </div>\r\n                <TodoList \r\n                    todos={ visibleItems }\r\n                    onDeleted={ this.deleteItem }\r\n                    onToggleImportant={ this.onToggleImportant }\r\n                    onToggleDone={ this.onToggleDone }\r\n                />\r\n                <ItemAddForm onItemAdded={ this.addItem } />\r\n            </div>\r\n        )\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\n// Render React App\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}