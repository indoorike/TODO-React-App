{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","_ref","toDo","done","react_default","a","createElement","className","SearchPanel","type","placeholder","TodoListItem","_this$props","this","props","label","onDeleted","important","onToggleDone","onToggleImportant","classNames","onClick","Component","TodoList","todos","elements","map","item","id","itemProps","Object","objectWithoutProperties","key","components_todo_list_item","assign","ItemStatusFilter","ItemAddForm","_this","onItemAdded","App","maxId","state","todoData","createTodoItem","deleteItem","setState","filter","value","addItem","text","newItem","_ref2","concat","toConsumableArray","_ref3","toggleProperty","_ref4","arr","propName","idx","findIndex","el","oldItem","objectSpread","defineProperty","slice","doneCount","length","todoCount","components_app_header","components_search_panel","components_item_status_filter","components_todo_list","components_item_add_form","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.8e251fbf.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.css';\r\n\r\n// React Component\r\nconst AppHeader = ({toDo, done}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>My Todo List</h1>\r\n            <h2>{toDo} more to do, {done} done</h2>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React from 'react';\r\n\r\nimport './search-panel.css';\r\n\r\n// React Component\r\nconst SearchPanel = () => {\r\n    return (\r\n        <input type=\"text\" className=\"form-control search-input\" \r\n            placeholder=\"type to search\" />\r\n    );\r\n};\r\n\r\nexport default SearchPanel;","import TodoListItem from './todo-list-item';\r\n\r\nexport default TodoListItem;","import React, {Component} from 'react';\r\n\r\nimport './todo-list-item.css';\r\n\r\nexport default class TodoListItem extends Component {\r\n\r\n    /**\r\n     * Основной метод рендеринга\r\n     *\r\n     * @return  {void} \r\n     */\r\n    render() {\r\n        // Деструктуризация параметров компонента\r\n        const { label, onDeleted, done, important, onToggleDone, onToggleImportant } = this.props;\r\n        \r\n        let classNames = 'todo-list-item';\r\n        if (done) {\r\n            classNames += ' done';\r\n        }\r\n\r\n        if(important) {\r\n            classNames += ' important';\r\n        }\r\n\r\n        return (\r\n            <span className={classNames}>\r\n                <span className=\"todo-list-item-label\" onClick={ onToggleDone }>\r\n                    { label }\r\n                </span>\r\n    \r\n                <button type=\"button\" className=\"btn btn-outline-success btn-sm float-right\" onClick={ onToggleImportant }>\r\n                    <i className=\"fa fa-exclamation\" />\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-danger btn-sm float-right\" onClick={ onDeleted }>\r\n                    <i className=\"fa fa-trash-o\" />\r\n                </button>\r\n            </span>\r\n        );\r\n    }\r\n}","import TodoList from './todo-list';\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\nimport TodoListItem from '../todo-list-item';\r\n\r\nimport './todo-list.css';\r\n\r\n// React Component\r\nconst TodoList = ( {todos, onDeleted, onToggleImportant, onToggleDone} ) => {\r\n    //\r\n    const elements = todos.map( (item) => {\r\n        // Деструктуризация массива поэлементно на id и всё остальное\r\n        const { id, ...itemProps } = item;\r\n        \r\n        return (\r\n            <li key={ id } className=\"list-group-item\">\r\n                <TodoListItem {...itemProps} onDeleted={ () => onDeleted(id) }\r\n                    onToggleImportant={ () => onToggleImportant(id) }\r\n                    onToggleDone={ () => onToggleDone(id) } />\r\n            </li>\r\n        );\r\n    });\r\n    \r\n    return (\r\n        <ul className=\"list-group todo-list\">\r\n            { elements }\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import ItemStatusFilter from './item-status-filter';\r\n\r\nexport default ItemStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './item-status-filter.css';\r\n\r\nexport default class ItemStatusFilter extends Component {\r\n    //\r\n    render() {\r\n        return (\r\n            <div className = \"btn-group\">\r\n                <button type = \"button\" className = \"btn btn-info\">All</button> \r\n                <button type = \"button\" className = \"btn btn-outline-secondary\">Active</button>\r\n                <button type = \"button\" className = \"btn btn-outline-secondary\">Done</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import ItemAddForm from './item-add-form';\r\n\r\nexport default ItemAddForm;","import React, { Component } from 'react';\r\n\r\nimport './item-add-form.css';\r\n\r\nexport default class ItemAddForm extends Component {\r\n\r\n    //\r\n    render() {\r\n        return (\r\n            <div className=\"item-add-form\">\r\n                <button className=\"btn btn-outline-secondary\" \r\n                    onClick={ () => this.props.onItemAdded('Hello World') }>Add Item</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\n\r\n// App components\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport TodoList from '../todo-list';\r\nimport ItemStatusFilter from '../item-status-filter';\r\nimport ItemAddForm from '../item-add-form';\r\n\r\n// App style\r\nimport './app.css';\r\n\r\n// Main Component\r\nexport default class App extends Component {\r\n    \r\n    // Генератор ID\r\n    maxId = 100;\r\n    \r\n    state = {\r\n        // Основные данные приложения\r\n        todoData: [\r\n            this.createTodoItem('Drink Coffee'),\r\n            this.createTodoItem('Make Awesome App'),\r\n            this.createTodoItem('Have a dinner'),\r\n            this.createTodoItem('Have a lunch')\r\n        ]\r\n    };\r\n\r\n    // Метод создания нового объекта\r\n    createTodoItem(label) {\r\n        return {\r\n            id:  this.maxId++, // Generated UID\r\n            label,\r\n            important: false,\r\n            done: false\r\n        };\r\n    }\r\n\r\n    // Удаление элемента из массива данных\r\n    deleteItem = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            /* const idx = todoData.findIndex((el) => el.id === id);\r\n            const newTodoData = [\r\n                ...todoData.slice(0, idx),\r\n                ...todoData.slice(idx + 1)\r\n            ]; */\r\n\r\n            // const newTodoData = todoData.filter((value, key) => {return key !== idx});\r\n            const newTodoData = todoData.filter((value) => value.id !== id);\r\n            \r\n            return {\r\n                todoData: newTodoData\r\n            };\r\n        });\r\n    };\r\n\r\n    // Добавление нового элемента в массив данных\r\n    addItem = (text) => {\r\n        \r\n        const newItem = this.createTodoItem(text);\r\n        \r\n        this.setState( ({todoData}) => {\r\n            // Add Element in Array\r\n            const newTodoData = [...todoData, newItem];\r\n\r\n            return {\r\n                todoData: newTodoData\r\n            };\r\n        });\r\n    };\r\n\r\n    // \"Переключатель\" параметров у элемента\r\n    toggleProperty(arr, id, propName) {\r\n        // получение индекса у элемента для изменения параметра\r\n        const idx = arr.findIndex((el) => el.id === id);\r\n        // Определенный элемент массива\r\n        const oldItem = arr[idx];\r\n        // Новый массив с элементами, включающий старый массив + новый элемент массива\r\n        //   с измененным параметром (состоянием)\r\n        const newItem = {\r\n            ...oldItem,\r\n            [propName]: !oldItem[propName]\r\n        };\r\n\r\n        // Construct new Array\r\n        return [\r\n            ...arr.slice(0, idx),\r\n            newItem,\r\n            ...arr.slice(idx + 1)\r\n        ];\r\n    }\r\n\r\n    // \"Переключатель\" параметра important\r\n    onToggleImportant = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'important')\r\n            };\r\n        });\r\n    };\r\n    \r\n    // \"Переключатель\" параметра done\r\n    onToggleDone = (id) => {\r\n        this.setState( ({todoData}) => {\r\n            return {\r\n                todoData: this.toggleProperty(todoData, id, 'done')\r\n            };\r\n        });\r\n    };\r\n    \r\n    render() {\r\n        // Счетчики выполненных и оставшихся заданий\r\n        const doneCount = this.state.todoData.filter(el => el.done).length;\r\n        const todoCount = this.state.todoData.length - doneCount;\r\n        \r\n        return (\r\n            <div className=\"todo-app\">\r\n                <AppHeader toDo={todoCount} done={doneCount} />\r\n                <div className=\"top-panel d-flex\">\r\n                    <SearchPanel />\r\n                    <ItemStatusFilter />\r\n                </div>\r\n                <TodoList \r\n                    todos={ this.state.todoData } \r\n                    onDeleted={ this.deleteItem }\r\n                    onToggleImportant={ this.onToggleImportant }\r\n                    onToggleDone={ this.onToggleDone } \r\n                />\r\n                <ItemAddForm onItemAdded={ this.addItem } />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\n// Render React App\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}